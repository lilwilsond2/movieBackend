swagger: "2.0"
info:
  description: "This is mostly nothing"
  version: "1.0.0"
  title: "Sample movie thingy"
host: "[HOST_ADDRESS]"
basePath: "/api"
schemes:
- "https"
- "http"
paths:
  /movie:
    get:
      tags:
      - "movie"
      summary: "Return a list of all movies"
      operationId: "getMovies"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "sort"
          description: "field to sort by"
          type: "string"
          enum:
            - "title"
            - "format"
            - "length"
            - "releaseYear"
            - "rating"
        - in: "query"
          name: "order"
          description: "sort order"
          type: "string"
          default: "asc"
          enum:
            - "asc"
            - "desc"
      responses:
        200:
            description: "successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Movie"
    post:
      tags:
      - "movie"
      summary: "Add a new movie"
      operationId: "addMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        405:
          description: "Invalid input"
      security:
      - movie_auth:
        - "write:movies"
    put:
      tags:
      - "movie"
      summary: "Update an existing movie"
      operationId: "updateMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
        405:
          description: "Validation exception"
      security:
      - movie_auth:
        - "write:movies"
    delete:
      tags:
      - "movie"
      summary: "Delete an existing movie"
      operationId: "deleteMovie"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "id"
        description: "id of movie object that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "Ok"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
        405:
          description: "Validation exception"
      security:
      - movie_auth:
        - "write:movies"
securityDefinitions:
  movie_auth:
    type: "oauth2"
    authorizationUrl: "[OATH_URL]"
    flow: "implicit"
    scopes:
      write:movies: "modify movies"
definitions:
  Movie:
    type: "object"
    required:
    - "id"
    - "title"
    - "format"
    - "length"
    - "releaseYear"
    - "rating"
    properties:
      id:
        type: "string"
      title:
        type: "string"
        minLength: 1
        maxLength: 50
      format:
        type: "string"
        enum:
        - "VHS"
        - "DVD"
        - "Streaming"
      length:
        type: "integer"
        description: "length of movie in seconds"
        minimum: 0
        maximum: 30000
      releaseYear:
        type: "integer"
        minimum: 1800
        maximum: 2100
      rating:
        type: "integer"
        minimum: 1
        maximum: 5